# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- main
- develop

pr: none

variables:
  solution: 'OSDP-Bench.sln'
  buildConfiguration: 'Release'
  outputDirectory: '$(build.binariesDirectory)/$(buildConfiguration)'
  buildPlatform: 'x64|ARM64'
  appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'

jobs:
#- job: android_build
#  pool:
#    vmImage: 'windows-latest'
#  steps:
#    - template: ci/android-build.yml

#- job: winui_build
#  pool:
#    vmImage: 'windows-latest'
#  steps:
#    - template: ci/winui-build.yml
      
- job: testing
  pool:
    vmImage: 'windows-latest'
  steps:
    - template: ci/testing.yml
      
    - powershell: |
        # Find version file (could be Directory.Build.props, .csproj, or AssemblyInfo.cs)
        # This example assumes Directory.Build.props
        $versionFile = "Directory.Build.props"
        
        if (Test-Path $versionFile) {
          Write-Host "Using $versionFile for version"
        } else {
          # Try to find the main project file
          $versionFile = Get-ChildItem -Path . -Filter "*.csproj" -Recurse | Select-Object -First 1 -ExpandProperty FullName
          Write-Host "Using $versionFile for version"
        }
        
        # Read current version
        $fileContent = Get-Content $versionFile -Raw
        if ($fileContent -match '<Version>(.*?)</Version>') {
          $currentVersion = $matches[1]
          Write-Host "Current version: $currentVersion"
        
          # Parse version components
          $versionParts = $currentVersion.Split('.')
          $major = $versionParts[0]
          $minor = $versionParts[1]
          $patch = [int]$versionParts[2]
        
          # Increment patch number instead of build number
          $patch++
        
          # Keep build number if it exists, otherwise just use major.minor.patch
          if ($versionParts.Length -gt 3) {
            $build = $versionParts[3]
            $newVersion = "$major.$minor.$patch.$build"
          } else {
            $newVersion = "$major.$minor.$patch"
          }
        
          Write-Host "New version: $newVersion"
        
          # Update version in file
          $fileContent = $fileContent -replace '<Version>(.*?)</Version>', "<Version>$newVersion</Version>"
          Set-Content -Path $versionFile -Value $fileContent
        
          # Configure git
          git config user.email "azuredevops@z-bitco.com"
          git config user.name "Azure DevOps Pipeline"
        
          # Commit and push changes
          git add $versionFile
          git commit -m "Bump version to $newVersion [skip ci]"
        
          # Set remote url with credentials
          $accessToken = "$(System.AccessToken)"
          $repoUrl = "$(Build.Repository.Uri)"
        
          # Remove the 'https://' prefix and add the PAT
          $repoUrl = $repoUrl -replace "https://", "https://`:$accessToken@"
        
          git push $repoUrl HEAD:main
        
          Write-Host "Version bumped to $newVersion"
        } else {
          Write-Host "##vso[task.logissue type=warning]No version tag found in $versionFile"
        }
      displayName: 'Bump patch version'
      condition: eq(variables['IsMergeFromDevelop'], 'true')
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)